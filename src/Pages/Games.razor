@page "/Games"
@using Bingo.Components
@using Bingo.Layouts
@using Bingo.Models
@using Bingo.Tauri.Interface.DB
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@layout MainLayout
@inject NavigationManager NavigationManager
@inject ITauriDBInterop TauriDBInterop

<PageFrame Title="Games">
    <PageFrameActionHeader>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.Add())" OnClick="@HandleCreate">
            Create
        </FluentButton>
    </PageFrameActionHeader>

    <ChildContent>
        <FluentDataGrid
            TGridItem="GameDataModel"
            Items="@Items" Pagination="@_pagination" RowSize="@DataGridRowSize.Medium" OnRowClick="@HandleRowClick">

            <PropertyColumn Property="@(p => p.Caption)" Sortable="@true"/>
            <PropertyColumn Property="@(p => p.Creation)"/>
            <PropertyColumn Property="@(p => p.Rows)"/>
            <PropertyColumn Property="@(p => p.Cols)"/>
            <TemplateColumn Title="Actions">
                <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Delete())"
                              OnClick="@(() => HandleRemove(context))"/>
            </TemplateColumn>
        </FluentDataGrid>

        <FluentPaginator State="@_pagination" SummaryTemplate="@_template"></FluentPaginator>
    </ChildContent>
</PageFrame>

@code {

    private readonly PaginationState _pagination = new() { ItemsPerPage = 10 };

    private List<GameDataModel> _data = [];

    private IQueryable<GameDataModel> Items => _data.AsQueryable();

    private readonly RenderFragment _template = @<span></span>;

    protected override async Task OnInitializedAsync()
    {
        _data = await TauriDBInterop.GetGamesAsync();
    }

    protected async Task HandleCreate()
    {
    }

    protected void HandleRowClick(FluentDataGridRow<GameDataModel> row)
    {
        NavigationManager.NavigateTo($"/GameTable/{row.Item?.Id}");
    }

    protected async Task HandleRemove(GameDataModel game)
    {
        _data.RemoveAll(i => i.Id == game.Id);
        await TauriDBInterop.DeleteGameAsync(game.Id);
    }

}