@page "/Templates"
@using Bingo.Components
@using Bingo.Components.Dialogs
@using Bingo.Layouts
@using Bingo.Mappers
@using Bingo.Models
@using Bingo.Models.Templates
@using Bingo.Tauri.Interface.DB
@using Bingo.Tauri.Interface.Dialog
@using Bingo.Tauri.Interface.Dialog.Models
@using Bingo.Tauri.Interface.FS
@using Bingo.Tauri.Interface.FS.Models
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@layout MainLayout
@inject ITauriDialogInterop TauriDialogInterop
@inject ITauriFSInterop TauriFSInterop
@inject ITauriDBInterop TauriDBInterop
@inject IDialogService DialogService

<PageFrame Title="Templates">
    <PageFrameActionHeader>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.ArrowUpload())" OnClick="@HandleUpload">
            Import
        </FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.Add())" OnClick="@HandleCreate">
            Create
        </FluentButton>
    </PageFrameActionHeader>

    <ChildContent>
        <FluentDataGrid
            Items="@TreeData" RowSize="@DataGridRowSize.Medium">
            <TemplateColumn Title="Name">
                <div class="d-flex align-items-center name-cell" style="padding-left: @(context.Level * 20)px;">
                    <FluentButton Appearance="Appearance.Stealth"
                                  IconStart="@(context.IsExpanded ? new Size16.CaretDown() : new Size16.CaretRight())"
                                  OnClick="@(() => ToggleExpand(context))"
                                  Disabled="@(context.Children.Count == 0)"/>
                    @context.Name
                </div>
            </TemplateColumn>

            <TemplateColumn Title="Actions" Width="140px">
                @if (context.Level == 1)
                {
                    <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.ArrowDownload())"
                                  OnClick="@(() => HandleExport(context))"/>
                    <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Edit())"
                                  OnClick="@(() => HandleEdit(context))"/>
                    <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Delete())"
                                  OnClick="@(() => HandleRemove(context))"/>
                }
            </TemplateColumn>
        </FluentDataGrid>
    </ChildContent>
</PageFrame>

@code {

    private List<TemplateDataModel> _templates = [];

    private List<TreeNode> _treeData = [];

    private IQueryable<TreeNode> TreeData => _treeData.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        _templates = await TauriDBInterop.GetTemplatesAsync();
        UpdateTreeData();
    }

    protected async Task HandleUpload()
    {
        await Utils.WithNonNullAsync(TauriDialogInterop.OpenFileAsync(new OpenDialogOptions("", [new DialogFilter(["json"], "export.json")])), path
            => Utils.WithNonNullAsync(TauriFSInterop.ReadTextFileAsync(path, new ReadFileOptions(null)), data
                => Utils.WithNonNull(System.Text.Json.JsonSerializer.Deserialize<TemplateExportDTO>(data), async dto =>
                {
                    var template = dto.ToDataModel(DateTime.Now);
                    _templates.Add(template);
                    await TauriDBInterop.AddTemplateAsync(template);
                    UpdateTreeData();
                })));
    }

    protected async Task HandleCreate() => await OpenTemplateEditor(null);

    protected async Task HandleExport(TreeNode node)
    {
        if (node.Data is TemplateDataModel template)
        {
            await Utils.WithNonNullAsync(TauriDialogInterop.SaveFileAsync(new SaveDialogOptions($"export_{template.Id}.json", [])), async path =>
            {
                var data = System.Text.Json.JsonSerializer.Serialize(template.ToExportDTO());
                await TauriFSInterop.WriteTextFileAsync(path, data, new WriteFileOptions());
            });
        }
    }

    protected async Task HandleEdit(TreeNode node)
    {
        if (node.Data is TemplateDataModel template)
        {
            await OpenTemplateEditor(template);
        }
    }

    protected async Task HandleRemove(TreeNode node)
    {
        if (node.Data is TemplateDataModel template)
        {
            _templates.RemoveAll(i => i.Id == template.Id);
            await TauriDBInterop.DeleteTemplateAsync(template.Id);
            UpdateTreeData();
        }
    }

    protected void ToggleExpand(TreeNode node)
    {
        node.IsExpanded = !node.IsExpanded;

        if (node is { IsExpanded: true, Children.Count: > 0 })
        {
            _treeData.InsertRange(_treeData.IndexOf(node) + 1, node.Children);
        }
        else
        {
            _treeData.RemoveAll(child => node.Children.Contains(child));
        }
    }

    private async Task OpenTemplateEditor(TemplateDataModel? data)
    {
        var dialogData = data == null
            ? new TemplateEditModel()
            : new TemplateEditModel
            {
                Id = data.Id,
                Name = data.Name,
                Group = data.Group,
                Items = data.Items
                    .Select(i => new TemplateItemEditModel
                    {
                        Id = i.Id,
                        Caption = i.Caption,
                    })
                    .ToList(),
            };
        var dialog = await DialogService.ShowDialogAsync<TemplateEditorDialog>(dialogData, new DialogParameters
        {
            Height = "400px",
            Title = data == null ? "Creating Template" : "Updating Template",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (result is { Cancelled: false, Data: not null })
        {
            var resultData = (TemplateEditModel)result.Data;

            if (data == null)
            {
                var item = new TemplateDataModel(
                    resultData.Id,
                    resultData.Name!,
                    resultData.Group!,
                    DateTime.Now,
                    false,
                    resultData.Items.Select(i => new TemplateItemDataModel(i.Id, i.Caption!, resultData.Id)).ToList());
                _templates.Add(item);
                await TauriDBInterop.AddTemplateAsync(item);
            }
            else
            {
                var item = data with
                {
                    Name = resultData.Name!,
                    Group = resultData.Group!,
                    Items = resultData.Items.Select(i => new TemplateItemDataModel(i.Id, i.Caption!, resultData.Id)).ToList()
                };
                _templates.Insert(_templates.IndexOf(data), item);
                _templates.Remove(data);
                await TauriDBInterop.UpdateTemplateAsync(item);
            }

            UpdateTreeData();
        }
    }

    private void UpdateTreeData()
    {
        _treeData = _templates
            .GroupBy(template => template.Group)
            .OrderBy(grouping => grouping.Key)
            .Select(grouping =>
            {
                return new TreeNode(grouping.Key)
                {
                    Name = grouping.Key,
                    Level = 0,
                    Children = grouping
                        .OrderBy(template => template.Name)
                        .Select(template =>
                        {
                            return new TreeNode(template)
                            {
                                Name = template.Name,
                                Level = 1,
                                Children = template.Items
                                    .OrderBy(item => item.Caption)
                                    .Select(item => new TreeNode(item)
                                    {
                                        Name = item.Caption,
                                        Level = 2,
                                    }).ToList(),
                            };
                        }).ToList(),
                };
            }).ToList();
    }

}