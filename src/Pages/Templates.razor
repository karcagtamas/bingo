@page "/Templates"
@using Bingo.Components
@using Bingo.Components.Dialogs
@using Bingo.Layouts
@using Bingo.Models
@using Bingo.Tauri.Interface.Dialog
@using Bingo.Tauri.Interface.Dialog.Models
@using Bingo.Tauri.Interface.FS
@using Bingo.Tauri.Interface.FS.Models
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@layout MainLayout
@inject ITauriDialogInterop TauriDialogInterop
@inject ITauriFSInterop TauriFSInterop
@inject IDialogService DialogService

<PageFrame Title="Templates">
    <div>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.ArrowUpload())" OnClick="@HandleUpload">
            Import
        </FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.Add())" OnClick="@HandleCreate">
            Create
        </FluentButton>
    </div>

    <FluentDataGrid
        Items="@Items" Pagination="@_pagination" RowSize="@DataGridRowSize.Medium">

        <PropertyColumn Property="@(p => p.Name)" Sortable="@true"/>
        <PropertyColumn Property="@(p => p.Group)" Sortable="@true"/>
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.ArrowDownload())"
                          OnClick="@(() => HandleExport(context))"/>
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Edit())"
                          OnClick="@(() => HandleEdit(context))"/>
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Delete())"
                          OnClick="@(() => HandleRemove(context))"/>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@_pagination" SummaryTemplate="@_template"></FluentPaginator>
</PageFrame>

@code {

    private readonly PaginationState _pagination = new() { ItemsPerPage = 10 };

    private readonly List<Template> _items =
    [
        new("id1", "PotA v1", "PotA", new DateTime(), false),
        new("id2", "PotA v2", "PotA", new DateTime(), false)
    ];

    private IQueryable<Template> Items => _items.AsQueryable();

    private readonly RenderFragment _template = @<span></span>;

    protected async Task HandleUpload()
    {
        var path = await TauriDialogInterop.OpenFileAsync(new OpenDialogOptions("", [new DialogFilter(["json"], "export.json")]));

        if (path != null)
        {
            var data = await TauriFSInterop.ReadTextFileAsync(path, new ReadFileOptions(null));

            if (data != null)
            {
                var item = System.Text.Json.JsonSerializer.Deserialize<Template>(data);

                if (item is not null)
                {
                    _items.Add(item);
                }
            }
        }
    }

    protected async Task HandleCreate() => await OpenTemplateEditor(null);

    protected async Task HandleExport(Template item)
    {
        var path = await TauriDialogInterop.SaveFileAsync(new SaveDialogOptions("export.json", []));

        if (path != null)
        {
            var data = System.Text.Json.JsonSerializer.Serialize(item);
            await TauriFSInterop.WriteTextFileAsync(path, data, new WriteFileOptions());
        }
    }

    protected async Task HandleEdit(Template item) => await OpenTemplateEditor(item);

    protected void HandleRemove(Template item)
    {
        _items.RemoveAll(i => i.Id == item.Id);
    }

    private async Task OpenTemplateEditor(Template? data)
    {
        var dialogData = data == null
            ? new TemplateModel()
            : new TemplateModel
            {
                Id = data.Id,
                Name = data.Name,
                Group = data.Group,
            };
        var dialog = await DialogService.ShowDialogAsync<TemplateEditorDialog>(dialogData, new DialogParameters
        {
            Height = "400px",
            Title = data == null ? "Creating Template" : "Updating Template",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
        });

        var result = await dialog.Result;
        if (result is { Cancelled: false, Data: not null })
        {
            var resultData = (TemplateModel)result.Data;

            if (data == null)
            {
                _items.Add(new Template(resultData.Id, resultData.Name!, resultData.Group!, new DateTime(), false));
            }
            else
            {
                _items.Insert(_items.IndexOf(data), data with { Name = resultData.Name!, Group = resultData.Group! });
                _items.Remove(data);
            }
        }
    }

}