@page "/Templates"
@using Bingo.Components
@using Bingo.Layouts
@using Bingo.Models
@using Bingo.Tauri.Interface
@using Bingo.Tauri.Interface.Models
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@layout MainLayout
@inject ITauriDialogInterop TauriDialogInterop
@inject IJSRuntime JSRuntime

<PageFrame Title="Templates">
    <div>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.ArrowUpload())" OnClick="@HandleUpload">
            Import
        </FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Size16.Add())" OnClick="@HandleCreate">Create
        </FluentButton>
    </div>

    <FluentDataGrid
        Items="@Items" Pagination="@_pagination" RowSize="@DataGridRowSize.Medium">

        <PropertyColumn Property="@(p => p.Name)" Sortable="@true"/>
        <PropertyColumn Property="@(p => p.Group)" Sortable="@true"/>
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.ArrowDownload())"
                          OnClick="@(() => HandleExport(context))"/>
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Edit())"
                          OnClick="@(() => HandleEdit(context))"/>
            <FluentButton Appearance="Appearance.Outline" IconStart="@(new Size16.Delete())"
                          OnClick="@(() => HandleRemove(context))"/>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@_pagination" SummaryTemplate="@_template"></FluentPaginator>
</PageFrame>

@code {

    private readonly PaginationState _pagination = new() { ItemsPerPage = 10 };

    private IQueryable<Template> Items { get; set; } = new List<Template>
    {
        new("id1", "PotA v1", "PotA", []),
        new("id2", "PotA v2", "PotA", []),
    }.AsQueryable();

    private readonly RenderFragment _template = @<span></span>;

    protected void HandleUpload()
    {
    }

    protected void HandleCreate()
    {
    }

    protected async Task HandleExport(Template item)
    {
        var result = await TauriDialogInterop.SaveFileAsync(new SaveFileOptions("test.txt"));
        Console.WriteLine(result);
    }

    protected void HandleEdit(Template item)
    {
    }

    protected void HandleRemove(Template item)
    {
    }

}