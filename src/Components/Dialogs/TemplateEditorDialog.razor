@using Bingo.Models
@implements IDialogContentComponent<TemplateModel>

<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="template_editor">
        <DataAnnotationsValidator/>
        <FluentTextField Label="Name" @bind-Value="@Content.Name" Required></FluentTextField>
        <FluentTextField Label="Group" @bind-Value="@Content.Group" Required></FluentTextField>

        <div style="color: var(--error);">
            <FluentValidationSummary/>
        </div>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    [Parameter] public TemplateModel Content { get; set; } = new();

    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    private EditContext _editContext = null!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Utils.WithNonNull(Dialog, dialog => dialog.CloseAsync(Content));
        }
    }

    private async Task CancelAsync()
    {
        await Utils.WithNonNull(Dialog, dialog => dialog.CloseAsync());
    }

}