@using Bingo.Mappers
@using Bingo.Models.Games
@using Bingo.Models.Templates
@using Bingo.Tauri.Interface.DB
@implements IDialogContentComponent<Bingo.Models.Games.GameEditModel>
@inject ITauriDBInterop TauriDBInterop

<FluentDialogBody>
    <EditForm EditContext="@_editContext" FormName="template_editor">
        <DataAnnotationsValidator/>
        <FluentTextField Class="w-100" Label="Caption" @bind-Value="@Content.Caption" Required/>
        <FluentNumberField Class="w-100" Label="Rows" @bind-Value="@Content.Rows"
                           ValueChanged="@(_ => GenerateCells())" Required/>
        <FluentNumberField Class="w-100" Label="Columns" @bind-Value="@Content.Cols"
                           ValueChanged="@(_ => GenerateCells())" Required/>

        <FluentSelect TOption="TemplateDataModel"
                      Class="w-100"
                      Label="Template"
                      Items="_templates"
                      OptionValue="@(d => d.Id)"
                      OptionText="@(d => d.Name)"
                      @bind-Value="@Content.TemplateId"
                      ValueChanged="@(_ => GenerateCells())"/>

        <FluentDivider Role="@DividerRole.Separator"/>

        @if (_matrixConfiguration != null && _matrixCells.Count > 0)
        {
            <GameMatrix Configuration="@_matrixConfiguration" Cells="@_matrixCells"/>
        }

        <div style="color: var(--error);">
            <FluentValidationSummary/>
        </div>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    [Parameter] public GameEditModel Content { get; set; } = new();

    [CascadingParameter] public FluentDialog? Dialog { get; set; }

    private EditContext _editContext = null!;
    private List<TemplateDataModel> _templates = [];

    private GameMatrixConfiguration? _matrixConfiguration = null;
    private List<GameMatrixCell> _matrixCells = [];

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Content);
        _templates = await TauriDBInterop.GetTemplatesAsync();
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Utils.WithNonNull(Dialog, dialog => dialog.CloseAsync(Content));
        }
    }

    private async Task CancelAsync()
    {
        await Utils.WithNonNull(Dialog, dialog => dialog.CloseAsync());
    }

    private void GenerateCells()
    {
        return;

        ReloadMatrixSettings();
    }

    private void ReloadMatrixSettings()
    {
        if (Content.Rows == null || Content.Cols == null || Content.Cells.Count == 0)
        {
            _matrixConfiguration = null;
            _matrixCells = [];
            return;
        }

        _matrixConfiguration = new GameMatrixConfiguration(Content.Rows ?? 0, Content.Cols ?? 0);
        _matrixCells = Content.Cells.Select(c => c.ToMatrixCell()).ToList();
    }

}